Usage
=====

EPOCH requirements
------------------

`VISEPOCH <https://github.com/georgeholt1/visepoch/>`_ is designed to work with
the SDF data files that result from an `EPOCH
<https://github.com/Warwick-Plasma/epoch>`_ simulation. Specifically, the SDF
data should be generated by an EPOCH laser wakefield acceleration (LWFA)
simulation.

Each :doc:`calculation </api/calculation_methods>` (and some :doc:`plotting
</api/plotting_methods>`) routines require certain features to be present
in the EPOCH input deck that leads to the SDF results. For example, the
:meth:`~visepoch.Simulation.calculate_laser_a0`
method requires ``poynting_flux = always`` to be specified in the ``output``
block. All such requirements are documented in the ``Notes`` section of routine
docstrings.

The EPOCH input decks bundled with the package should contain all the features
necessary to run every VISEPOCH routine.

VISEPOCH currently has no way of distinguishing between different types of
output dump. In practice, this means that named output dumps are not supported.

VISEPOCH interface
------------------

Once :doc:`installed </installation/installation>`, VISEPOCH presents as a
Python package. The core object is the :class:`~visepoch.Simulation`
class, which takes a path to a directory containing an EPOCH simulation 
(including SDF files) as input. All analysis and plotting routines are available
as methods of ``Simulation``, so all uses of VISEPOCH should generally begin
with an instantiation of this class. 

::

   >>> from visepoch import Simulation
   >>> sim = Simulation('/path/to/simulation/directory/')

The timestamps of the simulation dumps are immediately available.

::

   >>> sim.t
   array([5.88390171e-17, 6.67234454e-14, 1.33446891e-13, 2.00170336e-13, ...

We can now begin analysing the simulation results. When a call is made to a
:doc:`calculation method </api/calculation_methods>` for the first time after a
``Simulation`` object is instantiated, the corresponding attribute is populated.

::

   >>> sim.electron_charge is None
   True
   >>> _ = sim.calculate_electron_charge()
   >>> sim.electron_charge
   array([0.00000000e+00, ...

Making a call to the same method a second time *does not* update the attribute,
*unless* ``set_var=True`` (which is typically the default) and ``force=True``
are passed as argument. This allows us to test the effect of other parameters
more easily and less destructively. The variables used to set the attributes are
also returned by the ``calculate_*()`` methods (hence the leading ``_``
throwaway in the above example).

Once the desired attribute has been set, we can then call the corresponding
``plot_*()`` method to visualise the results.

::

   >>> sim.plot_electron_charge()

.. image:: /img/plot_electron_charge.png

The following sections detail the diagnostics available with VISEPOCH.

.. toctree::
   :maxdepth: 2

   electrons
   laser
   other